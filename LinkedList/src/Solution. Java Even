class ListNode { // Even Linked List
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

public class Solution {

    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = even;

        while (even != null && even.next != null) {
            odd.next = odd.next.next;
            even.next = even.next.next;
            odd = odd.next;
            even = even.next;
        }

        odd.next = evenHead;
        return head;
    }

    public static void main(String[] args) {
        // Create a sample linked list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        // Apply the reordering
        Solution solution = new Solution();
        ListNode reorderedHead = solution.oddEvenList(head);

        // Output the even-indexed nodes after reordering
        System.out.println("Values at even indices after reordering:");

        ListNode current = reorderedHead;
        int index = 1;

        while (current != null) {
            if (index % 2 == 0) {
                System.out.print(current.val + " ");
            }
            current = current.next;
            index++;
        }

        System.out.println(); // Newline for neat output

        // Optional: print entire reordered list
        System.out.println("\nReordered List (Odd followed by Even):");
        printList(reorderedHead);
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + (current.next != null ? " -> " : ""));
            current = current.next;
        }
        System.out.println();
    }
}
